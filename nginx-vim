#!/usr/bin/python3 -u

"""
 * yum install python3
 * pip3 install requests
 * yum install tar
 * yum install unzip
 * yum install mercurial
"""

import argparse
import os
import os.path
import re
import shutil
import subprocess
import sys
import traceback
import uuid

import requests


class Config:
    def __init__(self, args):
        self.args = args
        self.quiet = args.quiet
        self.verbose = not self.quiet
        self.cwd = os.getcwd()
        self.config_filename = os.path.join(self.cwd, os.path.basename(args.config_filename))
        self.directives_dir = os.path.join(self.cwd, 'directives')
        self.modules_dir = os.path.join(self.cwd, 'modules')
        self.documentation_repo = None
        self.nginx_source_repo = None
        self.njs_source_repo = None
        self.freebsd_port_modules = None
        self.nginx_commercial = set()
        self.nginx_deprecated = set()
        self.nginx_removed = set()
        self.nginx_undocumented_by_purpose = set()
        self.excludes = dict()
        self.force_includes = dict()
        if not os.path.isfile(self.config_filename):
            sys.exit("fatal error: configuration file '%s' not exists" % args.config_filename)
        with open(self.config_filename, encoding='UTF-8', errors='strict') as config_file:
            lines = config_file.read().split('\n')
        for line in lines:
            comment_start = line.find('#')
            if comment_start > -1:
                line = line[:comment_start]
            line = line.strip()
            if not line:
                continue
            line = line.replace("\t", "\x20")
            name, value = line.split(None, 1)

            if name == 'documentation_repo':
                self.documentation_repo = value
            elif name == 'nginx_source_repo':
                self.nginx_source_repo = value
            elif name == 'njs_source_repo':
                self.njs_source_repo = value
            elif name == 'freebsd_port_modules':
                self.freebsd_port_modules = value
            elif name == 'nginx_removed':
                self.nginx_removed.add(value)
            elif name == 'nginx_deprecated':
                self.nginx_deprecated.add(value)
            elif name == 'nginx_commercial':
                self.nginx_commercial.add(value)
            elif name == 'nginx_undocumented_by_purpose':
                self.nginx_undocumented_by_purpose.add(value)
            elif name == 'exclude':
                repo, filename = value.split(None, 1)
                if repo not in self.excludes:
                    self.excludes[repo] = list()
                self.excludes[repo].append(filename)
            elif name == 'force_include':
                repo, filename = value.split(None, 1)
                if repo not in self.force_includes:
                    self.force_includes[repo] = list()
                self.force_includes[repo].append(filename)
            else:
                sys.exit("unknown directive '%s'" % name)

        if self.documentation_repo is None:
            sys.exit("documentation_repo must be defined")
        if self.nginx_source_repo is None:
            sys.exit("nginx_source_repo must be defined")
        if self.njs_source_repo is None:
            sys.exit("njs_source_repo must be defined")
        if self.freebsd_port_modules is None:
            sys.exit("self.freebsd_port_modules must be defined")

class Process:
    def __init__(self, *args):
        self.args = args
        process = subprocess.Popen(args, stdin=None, stdout=subprocess.PIPE, stderr=subprocess.PIPE, close_fds=True)
        self.stdout_bytes, self.stderr_bytes = process.communicate()
        self.stdout = self.stdout_bytes.decode(encoding="utf-8", errors='strict').strip()
        self.stderr = self.stderr_bytes.decode(encoding="utf-8", errors='strict').strip()
        self.returncode = process.returncode

    def failed(self):
        return self.returncode != 0

    def print_info(self, message):
        print(message + ": Process(", self.args, ") failed")
        print("returncode:", self.returncode)
        print("stdout:", self.stdout)
        print("stderr:", self.stderr)


class Util:
    @staticmethod
    def files(directory, ext):
        entries = os.listdir(directory)
        for entry in entries:
            filename = os.path.join(directory, entry)
            if os.path.isdir(filename):
                for filename in Util.files(filename, ext):
                    yield filename
            if os.path.isfile(filename):
                if isinstance(ext, str):
                    if filename.endswith(ext):
                        yield filename
                elif isinstance(ext, list):
                    for _ in ext:
                        if filename.endswith(_):
                            yield filename
                else:
                    raise RuntimeError(f'Unknown ext type {type(ext)}')

    @staticmethod
    def print_set(name, _set):
        if _set:
            print("")
            print(name)
            print("-" * len(name))
            for directive in sorted(_set):
                print(directive)

    @staticmethod
    def write_set(filename, _set):
        tmp_filename = filename + '.tmp.' + uuid.uuid4().hex + '.tmp'
        content = list()
        for directive in sorted(_set):
            content.append(directive)
        with open(tmp_filename, "w") as tmp_file:
            tmp_file.write('\n'.join(content))
        os.rename(tmp_filename, filename)

    @staticmethod
    def read_set(filename):
        _set = set()
        with open(filename) as _file:
            for line in _file:
                _set.add(line.strip())
            return _set

    @staticmethod
    def write_file(filename, content):
        tmp_filename = filename + '.tmp.' + uuid.uuid4().hex + '.tmp'
        with open(tmp_filename, "w") as tmp_file:
            tmp_file.write(content)
        os.rename(tmp_filename, filename)

    @staticmethod
    def read_file(filename):
        with open(filename) as _file:
            content = _file.read()
            return content

class NginxDocumentation:
    def __init__(self, config):
        self.config = config
        self.full_documentation_dir = os.path.join(self.config.cwd, os.path.basename(self.config.documentation_repo))
        self.english_documentation_dir = os.path.join(self.full_documentation_dir, 'xml/en/docs')

        self.directives_filename = os.path.join(self.config.directives_dir, 'documentation-directives')
        self.block_directives_filename = os.path.join(self.config.directives_dir, 'documentation-block-directives')

        self.directives = set()
        self.block_directives = set()

    def cond_sync(self):
        if os.path.isdir(self.english_documentation_dir):
            return
        else:
            self.force_sync()

    def force_sync(self):
        if os.path.islink(self.config.config_filename):
            sys.exit("sync is not allowed: configuration file is symlink")
        if os.path.isdir(self.full_documentation_dir):
            os.chdir(self.full_documentation_dir)
            args = 'hg', '-y', 'pull', '-u'
        else:
            args = 'hg', '-y', 'clone', self.config.documentation_repo
        process = Process(*args)
        if process.failed():
            process.print_info("fatal error")
            sys.exit(1)
        os.chdir(self.config.cwd)

    def cond_extract(self):
        if os.path.isfile(self.directives_filename) and os.path.isfile(self.block_directives_filename):
            self.directives = Util.read_set(self.directives_filename)
            self.block_directives = Util.read_set(self.block_directives_filename)
        else:
            self.force_extract()

    def force_extract(self):
        for documentation_filename in Util.files(self.english_documentation_dir, '.xml'):
            self.extract_documentation_directives(documentation_filename)
        self.directives -= self.block_directives
        self.directives -= self.config.nginx_removed
        self.block_directives -= self.config.nginx_removed
        Util.write_set(self.directives_filename, self.directives)
        Util.write_set(self.block_directives_filename, self.block_directives)

    def extract_documentation_directives(self, documentation_filename):
        directive = None
        parse = False
        with open(documentation_filename, encoding='UTF-8', errors='strict') as documentation_file:
            for line in documentation_file:
                match = re.match(r'^\s*<directive name="(?P<directive>\S+)">\s*$', line)
                if match:
                    directive = match.group('directive')
                    self.directives.add(directive)
                    parse = True
                if re.match(r"^\s*</directive>\s*$", line):
                    parse = False
                if parse and re.match(r'^\s*<syntax block="yes".*$', line):
                    self.block_directives.add(directive)

class NginxSource:
    def __init__(self, config):
        self.config = config
        #self.nginx_deprecated = self.config.nginx_deprecated
        self.nginx_source_repo = config.nginx_source_repo
        self.njs_source_repo = config.njs_source_repo
        self.nginx_source_dir = os.path.join(config.cwd, os.path.basename(self.nginx_source_repo))
        self.njs_source_dir = os.path.join(config.cwd, os.path.basename(self.njs_source_repo))

        self.directives_filename = os.path.join(self.config.directives_dir, 'nginx-directives')
        #self.deprecated_directives_filename = os.path.join(self.config.directives_dir, 'nginx-deprecated-directives')

        self.directives = set()
        #self.deprecated_directives = set()

    def cond_sync(self):
        if os.path.isdir(self.nginx_source_dir) and os.path.isdir(self.njs_source_dir):
            return
        else:
            self.force_sync()

    def force_sync(self):
        if os.path.islink(self.config.config_filename):
            sys.exit("sync is not allowed: configuration file is symlink")
        if os.path.isdir(self.nginx_source_dir):
            os.chdir(self.nginx_source_dir)
            args = 'hg', '-y', 'pull', '-u'
        else:
            args = 'hg', '-y', 'clone', self.config.nginx_source_repo
        process = Process(*args)
        if process.failed():
            process.print_info("fatal error")
            sys.exit(1)
        os.chdir(self.config.cwd)
        if os.path.isdir(self.njs_source_dir):
            os.chdir(self.njs_source_dir)
            args = 'hg', '-y', 'pull', '-u'
        else:
            args = 'hg', '-y', 'clone', self.config.njs_source_repo
        process = Process(*args)
        if process.failed():
            process.print_info("fatal error")
            sys.exit(1)
        os.chdir(self.config.cwd)

    def cond_extract(self):
        if os.path.isfile(self.directives_filename): #and os.path.isfile(self.deprecated_directives_filename):
            self.directives = Util.read_set(self.directives_filename)
            #self.deprecated_directives = Util.read_set(self.deprecated_directives_filename)
        else:
            self.force_extract()

    def force_extract(self):
        for source_filename in Util.files(self.nginx_source_dir, '.c'):
            self.directives |= self.extract_source_directives(source_filename)
        for source_filename in Util.files(self.njs_source_dir, '.c'):
            self.directives |= self.extract_source_directives(source_filename)
        #for directive in self.directives.copy():
            #if directive in self.config.nginx_deprecated:
                #self.directives.remove(directive)
                #self.deprecated_directives.add(directive)
        #for directive in self.config.nginx_deprecated: # also include nginx-plus deprecated directives
        #    self.deprecated_directives.add(directive)
        Util.write_set(self.directives_filename, self.directives)
        #Util.write_set(self.deprecated_directives_filename, self.deprecated_directives)

    def extract_source_directives(self, source_filename):
        out = set()
        parse = False
        with open(source_filename, encoding='UTF-8', errors='strict') as source_file:
            for line in source_file:
                if re.match(r'^\s*(static\s+ngx_command_t\s+)|(const\s+ngx_command_t\s+)|(ngx_command_t\s+).*$', line):
                    parse = True
                if re.match(r'^};$', line):
                    parse = False
                if parse:
                    match = re.match(r'.*ngx_string\s*\(\s*"(?P<directive>\S+)"\s*\).*', line)
                    if match:
                        out.add(match.group('directive'))
        return out

class VimSyntax:
    def __init__(self, config):
        self.config = config

        self.nginx_source_repo = self.config.nginx_source_repo
        self.nginx_source_dir = os.path.join(self.config.cwd, os.path.basename(self.nginx_source_repo))
        self.vim_syntax_filename = os.path.join(self.nginx_source_dir, 'contrib/vim/syntax/nginx.vim')

        self.nginx_directives_filename = os.path.join(self.config.directives_dir, 'vim-syntax-nginx-directives')
        self.nginx_block_directives_filename = os.path.join(self.config.directives_dir, 'vim-syntax-nginx-block-directives')
        self.nginx_deprecated_directives_filename = os.path.join(self.config.directives_dir, 'vim-syntax-nginx-deprecated-directives')
        self.modules_directives_filename = os.path.join(self.config.directives_dir, 'vim-syntax-modules-directives')
        self.modules_deprecated_directives_filename = os.path.join(self.config.directives_dir, 'vim-syntax-modules-deprecated-directives')

        self.nginx_directives = set(['listen'])
        self.nginx_block_directives = set()
        self.nginx_deprecated_directives = set()
        self.modules_directives = set()
        self.modules_deprecated_directives = set()

    def cond_extract(self):
        self.force_extract()

    def force_extract(self):
        seen = set()
        with open(self.vim_syntax_filename, encoding='UTF-8', errors='strict') as vim_syntax_file:
            for line in vim_syntax_file:
                match = re.match(r'^syn keyword (ngxDirectiveBlock) contained (?P<directive>\S+).*$', line)
                if match:
                    directive = match.group('directive')
                    if directive in seen:
                        print("ERROR: directive %s already defined in syntax/nginx.vim" % directive)
                    else:
                        #self.nginx_directives.add(directive)
                        self.nginx_block_directives.add(directive)
                        seen.add(directive)
                match = re.match(r'^syn keyword (ngxDirective|ngxDirectiveImportant|ngxDirectiveControl|ngxDirectiveError) contained (?P<directive>\S+).*$', line)
                if match:
                    directive = match.group('directive')
                    if directive in seen:
                        print("ERROR: directive %s already defined in syntax/nginx.vim" % directive)
                    else:
                        self.nginx_directives.add(directive)
                        seen.add(directive)
                match = re.match(r'^syn keyword (ngxDirectiveDeprecated) contained (?P<directive>\S+).*$', line)
                if match:
                    directive = match.group('directive')
                    if directive in seen:
                        print("ERROR: directive %s already defined in syntax/nginx.vim" % directive)
                    else:
                        self.nginx_deprecated_directives.add(directive)
                        seen.add(directive)
                match = re.match(r'^syn keyword (ngxDirectiveThirdParty) contained (?P<directive>\S+).*$', line)
                if match:
                    directive = match.group('directive')
                    if directive in seen:
                        print("ERROR: directive %s already defined in syntax/nginx.vim" % directive)
                    else:
                        self.modules_directives.add(directive)
                        seen.add(directive)
                match = re.match(r'^syn keyword (ngxDirectiveThirdPartyDeprecated) contained (?P<directive>\S+).*$', line)
                if match:
                    directive = match.group('directive')
                    if directive in seen:
                        print("ERROR: directive %s already defined in syntax/nginx.vim" % directive)
                    else:
                        self.modules_deprecated_directives.add(directive)
                        seen.add(directive)

            Util.write_set(self.nginx_directives_filename, self.nginx_directives)
            Util.write_set(self.nginx_block_directives_filename, self.nginx_block_directives)
            Util.write_set(self.nginx_deprecated_directives_filename, self.nginx_deprecated_directives)
            Util.write_set(self.modules_directives_filename, self.modules_directives)
            Util.write_set(self.modules_deprecated_directives_filename, self.modules_deprecated_directives)


class NginxModule:
    def __init__(self, config, name, github_user, github_repository):
        self.config = config
        self.name = name
        self.github_user = github_user
        self.github_repository = github_repository
        self.uri = f'https://github.com/{github_user}/{github_repository}'
        self.repo = f'{github_user}:{github_repository}'

        self.excludes = list()
        if self.repo in self.config.excludes:
            self.excludes = self.config.excludes[self.repo]

        self.force_includes = list()
        if self.repo in self.config.force_includes:
            self.force_includes = self.config.force_includes[self.repo]

        self.module_dir = os.path.join(self.config.modules_dir, self.repo)
        self.directives_filename = os.path.join(self.config.directives_dir, f'zzz-module-{self.repo}')
        self.directives = set()
        self.deprecated_directives = set()

    def cond_sync(self):
        if os.path.isdir(self.module_dir):
            return
        else:
            self.force_sync()

    def force_sync(self):
        if os.path.islink(self.config.config_filename):
            sys.exit("sync is not allowed: configuration file is symlink")
        if os.path.isdir(self.module_dir):
            os.chdir(self.module_dir)
            args = 'git', 'pull', '-q'
            if self.config.verbose:
                print(f'git pull {self.uri}')
        else:
            args = 'git', 'clone', '-q', self.uri, self.module_dir
            if self.config.verbose:
                print(f'git clone {self.uri}')
        process = Process(*args)
        if process.failed():
            process.print_info("fatal error")
            sys.exit(1)
        os.chdir(self.config.cwd)

    def cond_extract(self):
        if os.path.isfile(self.directives_filename) and os.path.getmtime(self.directives_filename) >= os.path.getmtime(self.module_dir):
            self.directives = Util.read_set(self.directives_filename)
        else:
            self.force_extract()

    def force_extract(self):
        if self.repo == 'nbs-system:naxsi':
                self.directives |= self.naxsi_extract_source_directives()
        else:
            for source_filename in Util.files(self.module_dir, ['.c', '.cpp', '.h']):
                self.directives |= self.extract_source_directives(source_filename)
        if len(self.force_includes) > 0:
            for force_include in self.force_includes:
                source_filename = os.path.join(self.module_dir, force_include)
                self.directives |= self.force_extract_source_directives(source_filename)

        Util.write_set(self.directives_filename, self.directives)

    def extract_source_directives(self, source_filename):
        out = set()
        if len(self.excludes) > 0:
            for exclude in self.excludes:
                if source_filename.endswith(exclude):
                    return out
        parse = False
        with open(source_filename, encoding='UTF-8', errors='strict') as source_file:
            for line in source_file:
                if re.match(r'^\s*(static\s+ngx_command_t\s+)|(const\s+ngx_command_t\s+)|(ngx_command_t\s+).*$', line):
                    parse = True
                if re.match(r'^};.*$', line):
                    parse = False
                if parse:
                    match = re.match(r'.*ngx_string\s*\(\s*"(?P<directive>\S+)"\s*\).*', line)
                    if match:
                        out.add(match.group('directive'))
        return out

    def force_extract_source_directives(self, source_filename):
        out = set()
        with open(source_filename, encoding='UTF-8', errors='strict') as source_file:
            for line in source_file:
                match = re.match(r'.*ngx_string\s*\(\s*"(?P<directive>\S+)"\s*\).*', line)
                if match:
                    out.add(match.group('directive'))
        return out

    def naxsi_extract_source_directives(self):
        define = dict()
        h_filename = os.path.join(self.module_dir, 'naxsi_src/naxsi.h')
        with open(h_filename, encoding='UTF-8', errors='strict') as h_file:
            for line in h_file:
                match = re.match(r'#define\s+(?P<name>TOP_\S+)\s+"(?P<value>\S+)"\s*$', line)
                if match:
                    define[match.group('name')]= match.group('value')
        out = set()
        parse = False
        c_filename = os.path.join(self.module_dir, 'naxsi_src/naxsi_skeleton.c')
        with open(c_filename, encoding='UTF-8', errors='strict') as c_file:
            for line in c_file:
                if re.match(r'^\s*(static\s+ngx_command_t\s+)|(const\s+ngx_command_t\s+)|(ngx_command_t\s+).*$', line):
                    parse = True
                if re.match(r'^};.*$', line):
                    parse = False
                if parse:
                    match = re.match(r'.*ngx_string\s*\(\s*(?P<name>\S+)\s*\).*', line)
                    if match:
                        out.add(define[match.group('name')])
        return out


class NginxModules:
    def __init__(self, config):
        self.config = config
        self.modules_index_uri = self.config.freebsd_port_modules
        self.modules_index_raw_content_filename = os.path.join(self.config.directives_dir, 'cache-raw-modules-index')
        self.modules_index_raw_content = None

        self.nginx_modules = list()
        self.directives = set()
        self.deprecated_directives = set()

    def cond_sync(self):
        if os.path.isfile(self.modules_index_raw_content_filename):
            self.modules_index_raw_content = Util.read_file(self.modules_index_raw_content_filename)
            self.parse_modules_index_raw_content()
            for module in self.nginx_modules:
                module.cond_sync()
        else:
            self.force_sync()

    def force_sync(self):
        r = requests.get(self.modules_index_uri)
        self.modules_index_raw_content = r.text
        Util.write_file(self.modules_index_raw_content_filename, self.modules_index_raw_content)
        self.parse_modules_index_raw_content()
        for module in self.nginx_modules:
            module.force_sync()

    def parse_modules_index_raw_content(self):
        modules = list()
        for block in self.modules_index_raw_content_generator():
            github = False
            ignore = False
            for line in block:
                if 'PASSENGER_NGINX_VER' in line:
                    line = 'PASSENGER_GH_TUPLE= phusion:passenger:main:passenger'
                if 'HTTP_SLICE_AHEAD_EXTRA_PATCHES' in line:
                    ignore = True
                    break
                if 'NJS_QJS_IMPLIES' in line:
                    ignore = True
                    break
                if 'NJS_XML_IMPLIES' in line:
                    ignore = True
                    break
                if 'HTTP_RESPONSE_MASTER_SITES' in line:
                    ignore = True
                    break
                if 'HTTP_MP4_H264_MASTER_SITES' in line:
                    ignore = True
                    break
                if 'HTTP_MOGILEFS_MASTER_SITES' in line:
                    ignore = True
                    break
                if 'HTTP_REDIS_MASTER_SITES' in line:
                    ignore = True
                    break
                if 'NJS_GH_TUPLE' in line:
                    ignore = True
                    break
                if 'HTTP_ZIP_GH_TUPLE' in line:
                    ignore = True
                    break
                if 'DEVEL_KIT_GH_TUPLE' in line:
                    ignore = True
                    break
                if '_GH_TUPLE' in line:
                    modules.append(line)
                    github = True
                    break
            if not github and not ignore:
                print(block)
                print()
        out = list()
        for line in modules:
            line = line.strip()
            match = re.match(r'\S+=\s*(?P<github_user>\S+?):(?P<github_repository>\S+?):(?P<revision>\S+?):(?P<name>\S+).*$', line)
            if match:
                github_user = match.group('github_user')
                github_repository = match.group('github_repository')
                revision = match.group('revision')
                name = match.group('name')
                self.nginx_modules.append(NginxModule(self.config, name, github_user, github_repository))
            else:
                print(f"UNMATCHED LINE: {line}")


    def modules_index_raw_content_generator(self):
        content = self.modules_index_raw_content
        content = re.sub(r'\\\n', '', content)
        lines = content.split('\n')
        block = list()
        for line in lines:
            line = line.strip()
            line = line.replace('\t', '\x20')
            if line.startswith('#') or line.startswith('OPTIONS_GROUP+=') or line.startswith('OPTIONS_GROUP_THIRDPARTYGRP='):
                continue
            if line == '':
                if len(block) > 0:
                    yield block
                    block = list()
            else:
                block.append(line)

    def cond_extract(self):
        for module in self.nginx_modules:
            module.cond_extract()
            self.directives |= module.directives
            self.deprecated_directives |= module.deprecated_directives

    def force_extract(self):
        for module in self.nginx_modules:
            module.force_extract()
            self.directives |= module.directives
            self.deprecated_directives |= module.deprecated_directives

class Main:
    def __init__(self, args):
        self.args = args
        self.quiet = args.quiet
        self.verbose = not self.quiet
        self.config_filename = args.config_filename
        self.config = Config(args)
        if not os.path.isdir(self.config.directives_dir):
            os.mkdir(self.config.directives_dir)
        if not os.path.isdir(self.config.modules_dir):
            os.mkdir(self.config.modules_dir)

        self.nginx_documentation = NginxDocumentation(self.config)
        self.nginx_source = NginxSource(self.config)
        self.vim_syntax = VimSyntax(self.config)
        self.nginx_modules = NginxModules(self.config)

    def check(self):

        self.config.nginx_commercial
        self.config.nginx_deprecated
        self.config.nginx_removed
        self.config.nginx_undocumented_by_purpose

        self.nginx_documentation.directives
        self.nginx_documentation.block_directives

        self.nginx_source.directives

        self.vim_syntax.nginx_directives
        self.vim_syntax.nginx_block_directives
        self.vim_syntax.nginx_deprecated_directives
        self.vim_syntax.modules_directives
        self.vim_syntax.modules_deprecated_directives

        self.nginx_modules.directives
        self.nginx_modules.deprecated_directives

        Util.print_set("listed as undocumented, but not exists in nginx sources", self.config.nginx_undocumented_by_purpose - self.nginx_source.directives)
        Util.print_set("listed as commercial, but exists in nginx sources", self.config.nginx_commercial & self.nginx_source.directives)
        Util.print_set("listed as removed, but exists in nginx sources", self.config.nginx_removed & self.nginx_source.directives)

        Util.print_set("+nginx_source -documentation", self.nginx_source.directives - self.nginx_documentation.directives - self.nginx_documentation.block_directives - self.config.nginx_undocumented_by_purpose)
        Util.print_set("+documentation -nginx_source", (self.nginx_documentation.directives|self.nginx_documentation.block_directives) - (self.nginx_source.directives|self.config.nginx_commercial|self.config.nginx_removed))
        Util.print_set("+nginx_source -vim_syntax", self.nginx_source.directives - self.vim_syntax.nginx_directives - self.vim_syntax.nginx_block_directives - self.vim_syntax.nginx_deprecated_directives - self.config.nginx_removed)

        Util.print_set("+vim_syntax -nginx_source", (self.vim_syntax.nginx_directives | self.vim_syntax.nginx_block_directives | self.vim_syntax.nginx_deprecated_directives) - (self.nginx_source.directives | self.config.nginx_commercial))

        Util.print_set("deprecated in vim_syntax only, not in nginx_source", self.vim_syntax.nginx_deprecated_directives - self.config.nginx_deprecated)
        Util.print_set("deprecated in nginx_source only, not in vim_syntax", self.config.nginx_deprecated - self.vim_syntax.nginx_deprecated_directives)

        Util.print_set("block directives: +documentation -vim_syntax", self.nginx_documentation.block_directives - self.vim_syntax.nginx_block_directives)
        Util.print_set("block directives: +vim_syntax -documentation", self.vim_syntax.nginx_block_directives - self.nginx_documentation.block_directives)

        Util.print_set("+vim_syntax -documentation", self.vim_syntax.nginx_directives - self.nginx_documentation.directives - self.config.nginx_undocumented_by_purpose)
        Util.print_set("+documentation -vim_syntax", ((self.nginx_documentation.directives | self.config.nginx_undocumented_by_purpose)
                - (self.vim_syntax.nginx_directives | self.vim_syntax.nginx_deprecated_directives)) - self.config.nginx_removed )

        Util.print_set("vim_syntax modules directives overrides nginx directives",
            self.vim_syntax.modules_directives & (self.vim_syntax.nginx_directives|self.vim_syntax.nginx_block_directives|self.vim_syntax.nginx_deprecated_directives))

        Util.print_set("vim_syntax modules deprecated directives", self.vim_syntax.modules_deprecated_directives)
        Util.print_set("nginx modules deprecated directives", self.nginx_modules.deprecated_directives)

        Util.print_set("modules directives, present in vim_syntax only", self.vim_syntax.modules_directives - self.nginx_modules.directives)

        already_defined = self.vim_syntax.nginx_directives | self.vim_syntax.nginx_block_directives | self.vim_syntax.nginx_deprecated_directives | self.vim_syntax.modules_directives
        for module in self.nginx_modules.nginx_modules:
            new_module_directives = module.directives - already_defined
            self.print_new_module_directives(new_module_directives, module)
            already_defined |= new_module_directives

    def print_new_module_directives(self, new_module_directives, module):
        out = list()
        for directive in sorted(new_module_directives):
            out.append('syn keyword ngxDirectiveThirdParty contained %s' % directive)
        if out:
            print("")
            print('" %s' % module.uri)
            print("\n".join(out))

    def overlapping_check(self):
        seen_modules_directives = dict()
        for directive in self.nginx_source.directives:
            seen_modules_directives[directive] = 'nginx directive'
        for directive in self.config.nginx_commercial:
            if directive not in seen_modules_directives:
                seen_modules_directives[directive] = 'nginx commerical directive'
        for directive in self.config.nginx_deprecated:
            if directive not in seen_modules_directives:
                seen_modules_directives[directive] = 'nginx deprecated directive'

        for module in self.nginx_modules.nginx_modules:
            for directive in sorted(module.directives):
                if directive in seen_modules_directives:
                    print("directive %-32s from module %-48s ignored, it already defined in %-32s" % (directive, module.repo, seen_modules_directives[directive]))
                else:
                    seen_modules_directives[directive] = module.repo

    def run(self):
        if self.args.force_sync:
            self.nginx_documentation.force_sync()
            self.nginx_source.force_sync()
            self.nginx_modules.force_sync()
        else:
            self.nginx_documentation.cond_sync()
            self.nginx_source.cond_sync()
            self.nginx_modules.cond_sync()

        if self.args.force_extract:
            self.nginx_documentation.force_extract()
            self.nginx_source.force_extract()
            self.vim_syntax.force_extract()
            self.nginx_modules.force_extract()
        else:
            self.nginx_documentation.cond_extract()
            self.nginx_source.cond_extract()
            self.vim_syntax.cond_extract()
            self.nginx_modules.cond_extract()

        if self.args.check or self.args.overlapping_check:
            self.check()

        if self.args.overlapping_check:
            self.overlapping_check()

        if not (self.args.force_sync or self.args.force_extract or self.args.check or self.args.overlapping_check):
            self.check()


def main():
    parser = argparse.ArgumentParser(prog="nginx-vim")
    parser.add_argument("-q", required=False, action="store_true", dest="quiet", help="quiet")
    parser.add_argument("-c", required=False, metavar="CONFIG", dest="config_filename", default="nginx-vim.conf", help="configuration file (nginx-vim.conf)")
    parser.add_argument("--force-sync", required=False, action="store_true", dest="force_sync", help="force sync all repositories")
    parser.add_argument("--force-extract", required=False, action="store_true", dest="force_extract", help="force extract all directives")
    parser.add_argument("--check", required=False, action="store_true", dest="check", help="run directives check")
    parser.add_argument("--overlapping-check", required=False, action="store_true", dest="overlapping_check", help="run directives overlapping check")
    args = parser.parse_args()
    Main(args).run()

if __name__ == '__main__':
    main()
